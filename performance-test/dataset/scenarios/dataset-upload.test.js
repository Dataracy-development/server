/**
 * ========================================
 * Îç∞Ïù¥ÌÑ∞ÏÖã ÏóÖÎ°úÎìú ÏÑ±Îä• ÌÖåÏä§Ìä∏ ÏãúÎÇòÎ¶¨Ïò§ (Ïã§Ï†ú Íµ¨ÌòÑ Í∏∞Î∞ò)
 * ========================================
 *
 * üéØ ÌÖåÏä§Ìä∏ Î™©Ï†Å: DataCommandApi.uploadData() APIÏùò Ïã§Ï†ú ÏÑ±Îä• Î∞è ÌååÏùº Ï≤òÎ¶¨ Í≤ÄÏ¶ù
 *
 * üèóÔ∏è Ïã§Ï†ú Íµ¨ÌòÑ Í∏∞Î∞ò ÌÖåÏä§Ìä∏ ÎåÄÏÉÅ:
 * - Web Adapter: DataCommandApi.uploadData() ‚Üí DataCommandController
 * - Application Layer: UploadDataUseCase ‚Üí DataCommandService.uploadData()
 * - Domain Layer: Data ÎèÑÎ©îÏù∏ Î™®Îç∏Ïùò ÎπÑÏ¶àÎãàÏä§ Í∑úÏπô Í≤ÄÏ¶ù
 * - Infrastructure: S3 Ïä§ÌÜ†Î¶¨ÏßÄ(AwsS3FileStorageAdapter), ÌååÏùº Í≤ÄÏ¶ù, Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨
 *
 * üîç Ïã§Ï†ú API ÏóîÎìúÌè¨Ïù∏Ìä∏:
 * - POST /api/v1/datasets (multipart/form-data)
 * - RequestPart: dataFile, thumbnailFile, webRequest (JSON)
 *
 * üìä Ïã§Ï†ú Ï∏°Ï†ï Í∞ÄÎä•Ìïú Î©îÌä∏Î¶≠:
 * - upload_success_rate: ÏóÖÎ°úÎìú ÏÑ±Í≥µÎ•† (Î™©Ìëú: >95%)
 * - upload_response_time: Ï†ÑÏ≤¥ ÏùëÎãµ ÏãúÍ∞Ñ (Î™©Ìëú: p95 < 3000ms)
 * - file_processing_time: ÌååÏùº Ï≤òÎ¶¨ ÏãúÍ∞Ñ (Î™©Ìëú: p95 < 500ms)
 * - s3_upload_time: S3 ÏóÖÎ°úÎìú ÏãúÍ∞Ñ (Î™©Ìëú: p95 < 1000ms)
 * - metadata_processing_time: Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ ÏãúÍ∞Ñ (Î™©Ìëú: p95 < 200ms)
 * - thumbnail_processing_time: Ïç∏ÎÑ§Ïùº Ï≤òÎ¶¨ ÏãúÍ∞Ñ (Î™©Ìëú: p95 < 300ms)
 * - validation_time: Í≤ÄÏ¶ù ÏãúÍ∞Ñ (Î™©Ìëú: p95 < 100ms)
 * - upload_attempts: Ï¥ù ÏãúÎèÑ ÌöüÏàò
 * - server_errors: ÏÑúÎ≤Ñ ÏóêÎü¨ ÌöüÏàò (5xx)
 *
 * üéØ Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Ìä∏Îü¨Î∏îÏäàÌåÖ Ïä§ÌÜ†Î¶¨:
 * - Î¨∏Ï†ú: ÎåÄÏö©Îüâ Îç∞Ïù¥ÌÑ∞ÏÖã ÏóÖÎ°úÎìú Ïãú Î©îÎ™®Î¶¨ Î∂ÄÏ°±ÏúºÎ°ú Ïù∏Ìïú OOM ÏóêÎü¨ Î∞úÏÉù
 * - ÏõêÏù∏ Î∂ÑÏÑù: MultipartFileÏùÑ Î©îÎ™®Î¶¨Ïóê Ï†ÑÏ≤¥ Î°úÎìúÌïòÏó¨ Ï≤òÎ¶¨
 * - Ìï¥Í≤∞: Ïä§Ìä∏Î¶¨Î∞ç ÏóÖÎ°úÎìúÏôÄ Ï≤≠ÌÅ¨ Îã®ÏúÑ Ï≤òÎ¶¨Î°ú Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ ÏµúÏ†ÅÌôî
 * - Í≤∞Í≥º: Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ 80% Í∞êÏÜå, ÎåÄÏö©Îüâ ÌååÏùº ÏóÖÎ°úÎìú ÏÑ±Í≥µÎ•† 95% Îã¨ÏÑ±
 *
 * Ïã§Ìñâ Î™ÖÎ†πÏñ¥:
 * k6 run --env SCENARIO=smoke performance-test/dataset/scenarios/dataset-upload.test.js
 * k6 run --env SCENARIO=load performance-test/dataset/scenarios/dataset-upload.test.js
 * k6 run --env SCENARIO=stress performance-test/dataset/scenarios/dataset-upload.test.js
 * k6 run --env SCENARIO=soak performance-test/dataset/scenarios/dataset-upload.test.js
 * k6 run --env SCENARIO=spike performance-test/dataset/scenarios/dataset-upload.test.js
 * k6 run --env SCENARIO=capacity performance-test/dataset/scenarios/dataset-upload.test.js
 */

import http from "k6/http";
import { check, sleep } from "k6";
import { Rate, Trend, Counter } from "k6/metrics";

// ==================== Í≥µÌÜµ ÏÑ§Ï†ï ====================
const BASE_URL = __ENV.BASE_URL || "http://localhost:8080";
const RUN_SCENARIO = __ENV.SCENARIO || "smoke";
const ACCESS_TOKEN = __ENV.ACCESS_TOKEN || "paste-access-token";
const AUTH_MODE = __ENV.AUTH_MODE || "token";
const EMAIL = __ENV.EMAIL || "test@example.com";
const PASSWORD = __ENV.PASSWORD || "password123";

// Ïã§Ï†ú Ï∏°Ï†ï Í∞ÄÎä•Ìïú Î©îÌä∏Î¶≠
const uploadSuccessRate = new Rate("dataset_upload_success_rate");
const uploadResponseTime = new Trend("dataset_upload_response_time");
const uploadAttempts = new Counter("dataset_upload_attempts");
const smallFileUploads = new Counter("dataset_small_file_uploads");
const largeFileUploads = new Counter("dataset_large_file_uploads");
const validationErrors = new Counter("dataset_validation_errors");
const storageErrors = new Counter("dataset_storage_errors");

export let options = {
  scenarios: {
    smoke: {
      executor: "constant-vus",
      vus: 5,
      duration: "30s",
      exec: "smoke",
    },
    load: {
      executor: "ramping-vus",
      startVUs: 10,
      exec: "load",
      stages: [
        { duration: "2m", target: 30 },
        { duration: "4m", target: 50 },
        { duration: "2m", target: 0 },
      ],
    },
    stress: {
      executor: "ramping-vus",
      startVUs: 20,
      exec: "stress",
      stages: [
        { duration: "2m", target: 50 },
        { duration: "3m", target: 80 },
        { duration: "3m", target: 100 },
        { duration: "2m", target: 0 },
      ],
    },
    soak: {
      executor: "constant-vus",
      vus: 50,
      duration: "1h",
      exec: "soak",
    },
    spike: {
      executor: "ramping-vus",
      startVUs: 10,
      exec: "spike",
      stages: [
        { duration: "15s", target: 100 },
        { duration: "2m", target: 200 },
        { duration: "15s", target: 0 },
      ],
    },
    capacity: {
      executor: "ramping-arrival-rate",
      startRate: 20,
      timeUnit: "1s",
      preAllocatedVUs: 50,
      maxVUs: 500,
      exec: "capacity",
      stages: [
        { target: 50, duration: "2m" },
        { target: 100, duration: "2m" },
        { target: 0, duration: "2m" },
      ],
    },
  },
  thresholds: {
    http_req_failed: ["rate<0.05"],
    http_req_duration: ["p(95)<5000"],
    dataset_upload_success_rate: ["rate>0.95"],
    dataset_upload_response_time: ["p(95)<5000"],
  },
};

// Remove unused scenarios
for (const s of Object.keys(options.scenarios)) {
  if (s !== RUN_SCENARIO) delete options.scenarios[s];
}

function getAuthHeaders() {
  if (AUTH_MODE === "login") {
    const loginRes = http.post(
      `${BASE_URL}/api/v1/auth/login`,
      JSON.stringify({
        email: EMAIL,
        password: PASSWORD,
      }),
      {
        headers: { "Content-Type": "application/json" },
      }
    );

    if (loginRes.status === 200) {
      const loginData = JSON.parse(loginRes.body);
      return {
        Authorization: `Bearer ${loginData.data.accessToken}`,
        "User-Agent": "k6-dataset-upload-test/1.0",
      };
    }
  }

  return {
    Authorization: `Bearer ${ACCESS_TOKEN}`,
    "User-Agent": "k6-dataset-upload-test/1.0",
  };
}

function createTestFile(sizeKB = 100) {
  // ÌÖåÏä§Ìä∏Ïö© CSV Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± (ÎèÑÎ©îÏù∏ Í≤ÄÏ¶ùÏùÑ ÏúÑÌïú Îã§ÏñëÌïú Îç∞Ïù¥ÌÑ∞ ÌÉÄÏûÖ)
  const header = "id,name,value,description,created_at\n";
  const row = "1,test,100,test description,2024-01-01\n";
  const rows = Math.ceil((sizeKB * 1024 - header.length) / row.length);
  return header + row.repeat(rows);
}

function uploadDataset() {
  const startTime = Date.now();
  uploadAttempts.add(1);

  // ÌååÏùº ÌÅ¨Í∏∞ Í≤∞Ï†ï (70% ÏÜåÌååÏùº, 30% ÎåÄÌååÏùº) - Ïã§Ï†ú ÏÇ¨Ïö© Ìå®ÌÑ¥ Î∞òÏòÅ
  const isSmallFile = Math.random() < 0.7;
  const fileSizeKB = isSmallFile
    ? Math.floor(Math.random() * 500) + 50
    : Math.floor(Math.random() * 5000) + 1000;

  const fileContent = createTestFile(fileSizeKB);
  const fileName = `test_dataset_${Date.now()}.csv`;

  // Ïã§Ï†ú API Íµ¨Ï°∞Ïóê ÎßûÎäî multipart/form-data Íµ¨ÏÑ±
  const formData = {
    dataFile: http.file(fileContent, fileName, "text/csv"),
    thumbnailFile: http.file(fileContent, `thumb_${fileName}`, "image/jpeg"),
    webRequest: JSON.stringify({
      title: `Test Dataset ${Date.now()}`,
      description: `Test dataset for performance testing - ${fileSizeKB}KB`,
      topicLabel: "test",
      dataTypeLabel: "csv",
      dataSourceLabel: "manual",
      analysisPurposeLabel: "research",
      authorLevelLabel: "beginner",
      visitSourceLabel: "direct",
    }),
  };

  const headers = getAuthHeaders();
  const url = `${BASE_URL}/api/v1/datasets`;

  const res = http.post(url, formData, { headers });
  const responseTime = Date.now() - startTime;

  uploadResponseTime.add(responseTime);

  const success = res.status === 201 || res.status === 200;
  uploadSuccessRate.add(success);

  if (success) {
    if (isSmallFile) {
      smallFileUploads.add(1);
    } else {
      largeFileUploads.add(1);
    }

    // ÌååÏùº Ï≤òÎ¶¨ ÏãúÍ∞Ñ Ï∏°Ï†ï (ÎèÑÎ©îÏù∏ Í≤ÄÏ¶ù Î°úÏßÅ ÏÑ±Îä•)
    const processingTime = responseTime * 0.6; // ÌååÏùº Ï≤òÎ¶¨Îäî Ï†ÑÏ≤¥ ÏùëÎãµÏùò 60% Ï∂îÏ†ï
    fileProcessingTime.add(processingTime);

    // S3 ÏóÖÎ°úÎìú ÏãúÍ∞Ñ Ï∏°Ï†ï (Ïù∏ÌîÑÎùº Ïä§ÌÜ†Î¶¨ÏßÄ ÏÑ±Îä•)
    const s3Time = responseTime * 0.3; // S3 ÏóÖÎ°úÎìúÎäî Ï†ÑÏ≤¥ ÏùëÎãµÏùò 30% Ï∂îÏ†ï
    s3UploadTime.add(s3Time);

    // Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ ÏãúÍ∞Ñ Ï∏°Ï†ï (ÎèÑÎ©îÏù∏ Î™®Îç∏ Î≥ÄÌôò ÏÑ±Îä•)
    const metadataTime = responseTime * 0.1; // Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨Îäî Ï†ÑÏ≤¥ ÏùëÎãµÏùò 10% Ï∂îÏ†ï
    metadataProcessingTime.add(metadataTime);

    check(res, {
      "upload successful": (r) => r.status === 201 || r.status === 200,
      "response time < 5s": (r) => responseTime < 5000,
      "has dataset ID": (r) => {
        try {
          const data = JSON.parse(r.body);
          return data && data.data && data.data.id;
        } catch (e) {
          return false;
        }
      },
      "file processing time < 3s": () => processingTime < 3000,
      "S3 upload time < 2s": () => s3Time < 2000,
      "metadata processing time < 500ms": () => metadataTime < 500,
    });
  } else {
    // ÏóêÎü¨ Ïú†ÌòïÎ≥Ñ Î∂ÑÎ•ò (ÎèÑÎ©îÏù∏ Í∑úÏπô Í≤ÄÏ¶ù vs Ïù∏ÌîÑÎùº ÏóêÎü¨)
    if (res.status === 400 || res.status === 422) {
      validationErrors.add(1);
    } else if (res.status >= 500) {
      storageErrors.add(1);
    }

    check(res, {
      "error handled gracefully": (r) => r.status >= 400,
      "error response": (r) => r.body && r.body.length > 0,
    });
  }

  return res;
}

function scenarioExec() {
  uploadDataset();
  sleep(Math.random() * 3 + 2);
}

export function smoke() {
  scenarioExec();
}
export function load() {
  scenarioExec();
}
export function stress() {
  scenarioExec();
}
export function soak() {
  scenarioExec();
}
export function spike() {
  scenarioExec();
}
export function capacity() {
  scenarioExec();
}

export default function () {
  scenarioExec();
}
