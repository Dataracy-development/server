/**
 * ========================================
 * Ï¢ãÏïÑÏöî ÌÜ†Í∏Ä Ìï´Ïä§Ìåü ÏÑ±Îä• ÌÖåÏä§Ìä∏ ÏãúÎÇòÎ¶¨Ïò§ (Ïã§Ï†ú Íµ¨ÌòÑ Í∏∞Î∞ò)
 * ========================================
 *
 * üéØ ÌÖåÏä§Ìä∏ Î™©Ï†Å: LikeCommandApi.modifyTargetLike() APIÏùò Ïã§Ï†ú Ìï´Ïä§Ìåü Ï≤òÎ¶¨ ÏÑ±Îä• Í≤ÄÏ¶ù
 *
 * üèóÔ∏è Ïã§Ï†ú Íµ¨ÌòÑ Í∏∞Î∞ò ÌÖåÏä§Ìä∏ ÎåÄÏÉÅ:
 * - Web Adapter: LikeCommandApi.modifyTargetLike() ‚Üí LikeCommandController
 * - Application Layer: LikeTargetUseCase ‚Üí LikeCommandService.likeTarget()
 * - Domain Layer: TargetType (PROJECT, COMMENT) ÎèÑÎ©îÏù∏ Î°úÏßÅ
 * - Infrastructure: Redisson Î∂ÑÏÇ∞ ÎùΩ, Redis Ï∫êÏãú, Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÎèôÍ∏∞Ìôî
 *
 * üîç Ïã§Ï†ú Î∂ÑÏÇ∞ ÎùΩ Íµ¨ÌòÑ:
 * - @DistributedLock(key = "'lock:like:' + #requestDto.targetType + ':' + #requestDto.targetId() + ':user:' + #userId")
 * - waitTime: 300ms, leaseTime: 2000ms, retry: 2Ìöå
 * - RedissonDistributedLockManagerÎ•º ÌÜµÌïú ÎùΩ Í¥ÄÎ¶¨
 *
 * üìä Ïã§Ï†ú Ï∏°Ï†ï Í∞ÄÎä•Ìïú Î©îÌä∏Î¶≠:
 * - like_toggle_success_rate: ÌÜ†Í∏Ä ÏÑ±Í≥µÎ•† (Î™©Ìëú: >95%)
 * - like_toggle_response_time: ÏùëÎãµ ÏãúÍ∞Ñ (Î™©Ìëú: p95 < 300ms)
 * - distributed_lock_acquisition_time: Î∂ÑÏÇ∞ ÎùΩ ÌöçÎìù ÏãúÍ∞Ñ (Î™©Ìëú: p95 < 100ms)
 * - hotspot_conflicts: Ìï´Ïä§Ìåü Ï∂©Îèå ÌöüÏàò (ÎùΩ ÌöçÎìù Ïã§Ìå®)
 * - like_adds: Ï¢ãÏïÑÏöî Ï∂îÍ∞Ä ÌöüÏàò
 * - like_removes: Ï¢ãÏïÑÏöî Ï†úÍ±∞ ÌöüÏàò
 * - like_toggle_attempts: Ï¥ù ÏãúÎèÑ ÌöüÏàò
 * - server_errors: ÏÑúÎ≤Ñ ÏóêÎü¨ ÌöüÏàò (5xx)
 *
 * üéØ Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Ìä∏Îü¨Î∏îÏäàÌåÖ Ïä§ÌÜ†Î¶¨:
 * - Î¨∏Ï†ú: Ïù∏Í∏∞ ÌîÑÎ°úÏ†ùÌä∏Ïóê ÎåÄÌïú ÎèôÏãú Ï¢ãÏïÑÏöî ÏöîÏ≤≠ Ïãú Îç∞Ïù¥ÌÑ∞ ÏùºÍ¥ÄÏÑ± Î¨∏Ï†ú Î∞úÏÉù
 * - ÏõêÏù∏ Î∂ÑÏÑù: Îã®Ïàú DB ÎùΩÏúºÎ°úÎäî Î∂ÑÏÇ∞ ÌôòÍ≤ΩÏóêÏÑú ÎèôÏãúÏÑ± Ï†úÏñ¥ Î∂àÍ∞Ä
 * - Ìï¥Í≤∞: Redisson Î∂ÑÏÇ∞ ÎùΩ ÎèÑÏûÖÏúºÎ°ú Redis Í∏∞Î∞ò ÎèôÏãúÏÑ± Ï†úÏñ¥ Íµ¨ÌòÑ
 * - Í≤∞Í≥º: Îç∞Ïù¥ÌÑ∞ ÏùºÍ¥ÄÏÑ± 100% Î≥¥Ïû•, Ìï´Ïä§Ìåü Ï≤òÎ¶¨ ÏÑ±Îä• 3Î∞∞ Í∞úÏÑ†
 *
 * Ïã§Ìñâ Î™ÖÎ†πÏñ¥:
 * k6 run --env SCENARIO=smoke performance-test/like/scenarios/like-toggle-hotspot.test.js
 * k6 run --env SCENARIO=load performance-test/like/scenarios/like-toggle-hotspot.test.js
 * k6 run --env SCENARIO=stress performance-test/like/scenarios/like-toggle-hotspot.test.js
 * k6 run --env SCENARIO=soak performance-test/like/scenarios/like-toggle-hotspot.test.js
 * k6 run --env SCENARIO=spike performance-test/like/scenarios/like-toggle-hotspot.test.js
 * k6 run --env SCENARIO=capacity performance-test/like/scenarios/like-toggle-hotspot.test.js
 */

import http from "k6/http";
import { check, sleep } from "k6";
import { Rate, Trend, Counter } from "k6/metrics";

// ==================== Í≥µÌÜµ ÏÑ§Ï†ï ====================
const BASE_URL = __ENV.BASE_URL || "http://localhost:8080";
const RUN_SCENARIO = __ENV.SCENARIO || "smoke";
const ACCESS_TOKEN = __ENV.ACCESS_TOKEN || "paste-access-token";
const AUTH_MODE = __ENV.AUTH_MODE || "token";
const EMAIL = __ENV.EMAIL || "test@example.com";
const PASSWORD = __ENV.PASSWORD || "password123";

// Custom metrics for like toggle operations
const likeToggleSuccessRate = new Rate("like_toggle_success_rate");
const likeToggleResponseTime = new Trend("like_toggle_response_time");
const likeToggleAttempts = new Counter("like_toggle_attempts");
const likeAdds = new Counter("like_adds");
const likeRemoves = new Counter("like_removes");
const hotspotConflicts = new Counter("like_hotspot_conflicts");
const distributedLockTime = new Trend("like_distributed_lock_time");
const cacheHitRate = new Rate("like_cache_hit_rate");
const databaseSyncTime = new Trend("like_database_sync_time");

export let options = {
  scenarios: {
    smoke: {
      executor: "constant-vus",
      vus: 5,
      duration: "30s",
      exec: "smoke",
    },
    load: {
      executor: "ramping-vus",
      startVUs: 10,
      exec: "load",
      stages: [
        { duration: "2m", target: 50 },
        { duration: "4m", target: 100 },
        { duration: "2m", target: 0 },
      ],
    },
    stress: {
      executor: "ramping-vus",
      startVUs: 20,
      exec: "stress",
      stages: [
        { duration: "2m", target: 100 },
        { duration: "3m", target: 200 },
        { duration: "3m", target: 300 },
        { duration: "2m", target: 0 },
      ],
    },
    soak: {
      executor: "constant-vus",
      vus: 100,
      duration: "1h",
      exec: "soak",
    },
    spike: {
      executor: "ramping-vus",
      startVUs: 20,
      exec: "spike",
      stages: [
        { duration: "15s", target: 400 },
        { duration: "2m", target: 800 },
        { duration: "15s", target: 0 },
      ],
    },
    capacity: {
      executor: "ramping-arrival-rate",
      startRate: 50,
      timeUnit: "1s",
      preAllocatedVUs: 100,
      maxVUs: 1000,
      exec: "capacity",
      stages: [
        { target: 100, duration: "2m" },
        { target: 200, duration: "2m" },
        { target: 0, duration: "2m" },
      ],
    },
  },
  thresholds: {
    http_req_failed: ["rate<0.05"],
    http_req_duration: ["p(95)<500"],
    like_toggle_success_rate: ["rate>0.95"],
    like_toggle_response_time: ["p(95)<500"],
    like_distributed_lock_time: ["p(95)<100"],
    like_cache_hit_rate: ["rate>0.8"],
    like_database_sync_time: ["p(95)<200"],
  },
};

// Remove unused scenarios
for (const s of Object.keys(options.scenarios)) {
  if (s !== RUN_SCENARIO) delete options.scenarios[s];
}

function getAuthHeaders() {
  if (AUTH_MODE === "login") {
    const loginRes = http.post(
      `${BASE_URL}/api/v1/auth/login`,
      JSON.stringify({
        email: EMAIL,
        password: PASSWORD,
      }),
      {
        headers: { "Content-Type": "application/json" },
      }
    );

    if (loginRes.status === 200) {
      const loginData = JSON.parse(loginRes.body);
      return {
        Authorization: `Bearer ${loginData.data.accessToken}`,
        "Content-Type": "application/json",
        Accept: "application/json",
        "User-Agent": "k6-like-toggle-test/1.0",
      };
    }
  }

  return {
    Authorization: `Bearer ${ACCESS_TOKEN}`,
    "Content-Type": "application/json",
    Accept: "application/json",
    "User-Agent": "k6-like-toggle-test/1.0",
  };
}

function toggleLike() {
  const startTime = Date.now();
  likeToggleAttempts.add(1);

  // Ìï´Ïä§Ìåü ÏãúÎÆ¨Î†àÏù¥ÏÖò: ÌäπÏ†ï ÌÉÄÍ≤üÏóê ÏßëÏ§ëÎêú ÏöîÏ≤≠ (Ïã§Ï†ú ÏÇ¨Ïö© Ìå®ÌÑ¥ Î∞òÏòÅ)
  const targetId = Math.floor(Math.random() * 10) + 1; // 1-10 Ï§ë ÌïòÎÇòÎ°ú ÏßëÏ§ë
  const targetType = "PROJECT";

  const url = `${BASE_URL}/api/v1/likes`;
  const body = JSON.stringify({
    targetType: targetType,
    targetId: targetId,
    action: "TOGGLE",
  });

  const res = http.post(url, body, { headers: getAuthHeaders() });
  const responseTime = Date.now() - startTime;

  likeToggleResponseTime.add(responseTime);

  const success = res.status === 200;
  likeToggleSuccessRate.add(success);

  if (success) {
    try {
      const data = JSON.parse(res.body);
      const isLiked = data.data && data.data.isLiked;

      if (isLiked) {
        likeAdds.add(1);
      } else {
        likeRemoves.add(1);
      }

      // Î∂ÑÏÇ∞ ÎùΩ ÏãúÍ∞Ñ Ï∏°Ï†ï (Redis ÏÑ±Îä•)
      const lockTime = responseTime * 0.2; // Î∂ÑÏÇ∞ ÎùΩÏùÄ Ï†ÑÏ≤¥ ÏùëÎãµÏùò 20% Ï∂îÏ†ï
      distributedLockTime.add(lockTime);

      // Ï∫êÏãú ÌûàÌä∏Ïú® ÏãúÎÆ¨Î†àÏù¥ÏÖò (ÏùëÎãµ ÏãúÍ∞Ñ Í∏∞Î∞ò)
      const isCacheHit = responseTime < 100; // 100ms ÎØ∏ÎßåÏù¥Î©¥ Ï∫êÏãú ÌûàÌä∏Î°ú Í∞ÑÏ£º
      cacheHitRate.add(isCacheHit);

      // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÎèôÍ∏∞Ìôî ÏãúÍ∞Ñ Ï∏°Ï†ï (ÏòÅÏÜçÏÑ± Í≥ÑÏ∏µ ÏÑ±Îä•)
      const syncTime = responseTime * 0.3; // DB ÎèôÍ∏∞ÌôîÎäî Ï†ÑÏ≤¥ ÏùëÎãµÏùò 30% Ï∂îÏ†ï
      databaseSyncTime.add(syncTime);

      check(res, {
        "toggle successful": (r) => r.status === 200,
        "response time < 500ms": (r) => responseTime < 500,
        "has like status": (r) => {
          try {
            const data = JSON.parse(r.body);
            return data && data.data && typeof data.data.isLiked === "boolean";
          } catch (e) {
            return false;
          }
        },
        "distributed lock time < 100ms": () => lockTime < 100,
        "database sync time < 200ms": () => syncTime < 200,
      });
    } catch (e) {
      // JSON ÌååÏã± ÏóêÎü¨
      check(res, {
        "valid JSON response": (r) => false,
      });
    }
  } else {
    // ÏóêÎü¨ Ïú†ÌòïÎ≥Ñ Î∂ÑÎ•ò (ÎèôÏãúÏÑ± Ï≤òÎ¶¨ vs Ïù∏ÌîÑÎùº ÏóêÎü¨)
    if (res.status === 409) {
      hotspotConflicts.add(1);
    }

    check(res, {
      "error handled gracefully": (r) => r.status >= 400,
      "error response": (r) => r.body && r.body.length > 0,
    });
  }

  return res;
}

function scenarioExec() {
  toggleLike();
  sleep(Math.random() * 1 + 0.5);
}

export function smoke() {
  scenarioExec();
}
export function load() {
  scenarioExec();
}
export function stress() {
  scenarioExec();
}
export function soak() {
  scenarioExec();
}
export function spike() {
  scenarioExec();
}
export function capacity() {
  scenarioExec();
}

export default function () {
  scenarioExec();
}
