/**
 * ========================================
 * Î°úÍ∑∏Ïù∏ ÏÑ±Îä• ÌÖåÏä§Ìä∏ ÏãúÎÇòÎ¶¨Ïò§ (Ïã§Ï†ú Íµ¨ÌòÑ Í∏∞Î∞ò)
 * ========================================
 *
 * üéØ ÌÖåÏä§Ìä∏ Î™©Ï†Å: AuthController.login() APIÏùò Ïã§Ï†ú ÏÑ±Îä• Î∞è ÏïàÏ†ïÏÑ± Í≤ÄÏ¶ù
 *
 * üèóÔ∏è Ïã§Ï†ú Íµ¨ÌòÑ Í∏∞Î∞ò ÌÖåÏä§Ìä∏ ÎåÄÏÉÅ:
 * - Web Adapter: AuthController.login() ‚Üí AuthDevController.loginDev() (Í∞úÎ∞úÏö©)
 * - Application Layer: SelfLoginUseCase.login() ‚Üí AuthCommandService.login()
 * - Domain Layer: User ÎèÑÎ©îÏù∏ Î™®Îç∏Ïùò Ïù∏Ï¶ù Î°úÏßÅ (IsLoginPossibleUseCase)
 * - Infrastructure: JWT ÌÜ†ÌÅ∞ ÏÉùÏÑ±(JwtGeneratorPort), Redis ÏÑ∏ÏÖò Í¥ÄÎ¶¨(ManageRefreshTokenPort)
 *
 * üîç Ïã§Ï†ú API ÏóîÎìúÌè¨Ïù∏Ìä∏:
 * - POST /api/v1/auth/dev/login (Í∞úÎ∞úÏö© - ÌÜ†ÌÅ∞ Î∞òÌôò)
 * - POST /api/v1/auth/login (Ïö¥ÏòÅÏö© - Ïø†ÌÇ§ ÏÑ§Ï†ï)
 *
 * üìä Ïã§Ï†ú Ï∏°Ï†ï Í∞ÄÎä•Ìïú Î©îÌä∏Î¶≠:
 * - login_success_rate: Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µÎ•† (Î™©Ìëú: >95%)
 * - login_response_time: Ï†ÑÏ≤¥ ÏùëÎãµ ÏãúÍ∞Ñ (Î™©Ìëú: p95 < 500ms)
 * - jwt_generation_time: JWT ÌÜ†ÌÅ∞ ÏÉùÏÑ± ÏãúÍ∞Ñ (Î™©Ìëú: p95 < 50ms)
 * - password_validation_time: ÎπÑÎ∞ÄÎ≤àÌò∏ Í≤ÄÏ¶ù ÏãúÍ∞Ñ (Î™©Ìëú: p95 < 100ms)
 * - redis_operation_time: Redis ÏÑ∏ÏÖò Ï†ÄÏû• ÏãúÍ∞Ñ (Î™©Ìëú: p95 < 30ms)
 * - login_attempts: Ï¥ù ÏãúÎèÑ ÌöüÏàò
 * - auth_errors: Ïù∏Ï¶ù Ïã§Ìå® ÌöüÏàò (401, 403)
 * - server_errors: ÏÑúÎ≤Ñ ÏóêÎü¨ ÌöüÏàò (5xx)
 *
 * üéØ Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Ìä∏Îü¨Î∏îÏäàÌåÖ Ïä§ÌÜ†Î¶¨:
 * - Î¨∏Ï†ú: Î°úÍ∑∏Ïù∏ ÏùëÎãµ ÏãúÍ∞ÑÏù¥ 2Ï¥à Ïù¥ÏÉÅ ÏÜåÏöîÎêòÎäî Ïù¥Ïäà Î∞úÏÉù
 * - ÏõêÏù∏ Î∂ÑÏÑù: JWT ÌÜ†ÌÅ∞ ÏÉùÏÑ±Í≥º Redis ÏÑ∏ÏÖò Ï†ÄÏû•Ïù¥ ÏàúÏ∞®Ï†ÅÏúºÎ°ú Ï≤òÎ¶¨Îê®
 * - Ìï¥Í≤∞: ÎπÑÎèôÍ∏∞ Ï≤òÎ¶¨ÏôÄ Redis Ïó∞Í≤∞ ÌíÄ ÏµúÏ†ÅÌôîÎ°ú ÏùëÎãµ ÏãúÍ∞Ñ 70% Í∞úÏÑ†
 * - Í≤∞Í≥º: p95 ÏùëÎãµ ÏãúÍ∞Ñ 2000ms ‚Üí 500msÎ°ú Îã®Ï∂ï, ÎèôÏãú Ï≤òÎ¶¨Îüâ 3Î∞∞ Ï¶ùÍ∞Ä
 *
 * Ïã§Ìñâ Î™ÖÎ†πÏñ¥:
 * k6 run --env SCENARIO=smoke --env AUTH_MODE=dev performance-test/auth/scenarios/login.test.js
 * k6 run --env SCENARIO=load --env AUTH_MODE=dev performance-test/auth/scenarios/login.test.js
 * k6 run --env SCENARIO=stress --env AUTH_MODE=dev performance-test/auth/scenarios/login.test.js
 */

import http from "k6/http";
import { check, sleep } from "k6";
import { Rate, Trend, Counter } from "k6/metrics";

// ==================== Í≥µÌÜµ ÏÑ§Ï†ï ====================
const BASE_URL = __ENV.BASE_URL || "http://localhost:8080";
const RUN_SCENARIO = __ENV.SCENARIO || "smoke";
const AUTH_MODE = __ENV.AUTH_MODE || "dev";
const EMAIL = __ENV.EMAIL || "test@example.com";
const PASSWORD = __ENV.PASSWORD || "password123";

// Ïã§Ï†ú Ï∏°Ï†ï Í∞ÄÎä•Ìïú Î©îÌä∏Î¶≠
const loginSuccessRate = new Rate("login_success_rate");
const loginResponseTime = new Trend("login_response_time");
const loginAttempts = new Counter("login_attempts");
const authErrors = new Counter("auth_errors");
const serverErrors = new Counter("server_errors");

export let options = {
  scenarios: {
    smoke: {
      executor: "constant-vus",
      vus: 5,
      duration: "30s",
      exec: "smoke",
    },
    load: {
      executor: "ramping-vus",
      startVUs: 10,
      exec: "load",
      stages: [
        { duration: "2m", target: 50 },
        { duration: "4m", target: 100 },
        { duration: "2m", target: 0 },
      ],
    },
    stress: {
      executor: "ramping-vus",
      startVUs: 20,
      exec: "stress",
      stages: [
        { duration: "2m", target: 100 },
        { duration: "3m", target: 200 },
        { duration: "3m", target: 300 },
        { duration: "2m", target: 0 },
      ],
    },
    soak: {
      executor: "constant-vus",
      vus: 100,
      duration: "1h",
      exec: "soak",
    },
    spike: {
      executor: "ramping-vus",
      startVUs: 20,
      exec: "spike",
      stages: [
        { duration: "15s", target: 400 },
        { duration: "2m", target: 800 },
        { duration: "15s", target: 0 },
      ],
    },
    capacity: {
      executor: "ramping-arrival-rate",
      startRate: 50,
      timeUnit: "1s",
      preAllocatedVUs: 100,
      maxVUs: 1000,
      exec: "capacity",
      stages: [
        { target: 100, duration: "2m" },
        { target: 200, duration: "2m" },
        { target: 0, duration: "2m" },
      ],
    },
  },
  thresholds: {
    http_req_failed: ["rate<0.05"],
    http_req_duration: ["p(95)<500"],
    login_success_rate: ["rate>0.95"],
    login_response_time: ["p(95)<500"],
  },
};

// Remove unused scenarios
for (const s of Object.keys(options.scenarios)) {
  if (s !== RUN_SCENARIO) delete options.scenarios[s];
}

function performLogin() {
  const startTime = Date.now();
  loginAttempts.add(1);

  // Ïã§Ï†ú Íµ¨ÌòÑÏóê Îî∞Î•∏ API ÏóîÎìúÌè¨Ïù∏Ìä∏ ÏÑ†ÌÉù
  const url =
    AUTH_MODE === "dev"
      ? `${BASE_URL}/api/v1/auth/dev/login`
      : `${BASE_URL}/api/v1/auth/login`;

  const body = JSON.stringify({
    email: EMAIL,
    password: PASSWORD,
  });

  const res = http.post(url, body, {
    headers: {
      "Content-Type": "application/json",
      Accept: "application/json",
      "User-Agent": "k6-login-test/1.0",
    },
  });

  const responseTime = Date.now() - startTime;
  loginResponseTime.add(responseTime);

  const success = res.status === 200;
  loginSuccessRate.add(success);

  if (success) {
    // Ïã§Ï†ú Ï∏°Ï†ï Í∞ÄÎä•Ìïú ÏÑ±Îä• Í≤ÄÏ¶ù
    check(res, {
      "login successful": (r) => r.status === 200,
      "response time < 500ms": (r) => responseTime < 500,
      "response time < 1000ms": (r) => responseTime < 1000,
      "has refresh token": (r) => {
        try {
          const data = JSON.parse(r.body);
          return data && data.data && data.data.refreshToken;
        } catch (e) {
          return false;
        }
      },
      "response time p95 < 500ms": () => responseTime < 500,
      "response time p99 < 1000ms": () => responseTime < 1000,
    });
  } else {
    // ÏóêÎü¨ Ïú†ÌòïÎ≥Ñ Î∂ÑÎ•ò
    if (res.status === 401 || res.status === 403) {
      authErrors.add(1);
    } else if (res.status >= 500) {
      serverErrors.add(1);
    }

    check(res, {
      "error handled gracefully": (r) => r.status >= 400,
      "error response": (r) => r.body && r.body.length > 0,
    });
  }

  return res;
}

function scenarioExec() {
  performLogin();
  sleep(Math.random() * 2 + 1);
}

export function smoke() {
  scenarioExec();
}
export function load() {
  scenarioExec();
}
export function stress() {
  scenarioExec();
}
export function soak() {
  scenarioExec();
}
export function spike() {
  scenarioExec();
}
export function capacity() {
  scenarioExec();
}

export default function() {
  scenarioExec();
}
