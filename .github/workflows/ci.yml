name: CI Pipeline

on:
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: dataracy_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

      elasticsearch:
        image: elasticsearch:8.13.4
        env:
          discovery.type: single-node
          xpack.security.enabled: false
        ports:
          - 9200:9200
        options: --health-cmd="curl -f http://localhost:9200/_cluster/health || exit 1" --health-interval=30s --health-timeout=10s --health-retries=5

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run tests (exclude integration tests)
        run: ./gradlew test --continue
        env:
          CI: true
          SPRING_PROFILES_ACTIVE: test
          MYSQL_URL: jdbc:mysql://localhost:3306/dataracy_test
          MYSQL_USERNAME: root
          MYSQL_PASSWORD: root
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          ELASTICSEARCH_URL: http://localhost:9200
          KAFKA_BOOTSTRAP_SERVERS: localhost:9092

      - name: Generate test report
        run: ./gradlew jacocoTestReport
        if: always()

      - name: Check test coverage
        run: ./gradlew jacocoTestCoverageVerification
        continue-on-error: true # Ïª§Î≤ÑÎ¶¨ÏßÄ Î∂ÄÏ°±Ìï¥ÎèÑ ÎπåÎìú Í≥ÑÏÜç ÏßÑÌñâ
        if: always()

      - name: Display coverage summary
        run: |
          echo "üìä Ïª§Î≤ÑÎ¶¨ÏßÄ ÏöîÏïΩ:"
          if [ -f "build/reports/jacoco/test/jacocoTestReport.xml" ]; then
            echo "‚úÖ Ïª§Î≤ÑÎ¶¨ÏßÄ Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± ÏôÑÎ£å"
            echo "üìÅ HTML Î¶¨Ìè¨Ìä∏: build/reports/jacoco/test/html/index.html"
          else
            echo "‚ùå Ïª§Î≤ÑÎ¶¨ÏßÄ Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± Ïã§Ìå®"
          fi
        if: always()

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            build/test-results/
            build/reports/tests/
            build/reports/jacoco/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: build/reports/jacoco/test/jacocoTestReport.xml
          flags: unittests
          name: codecov-umbrella

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build application
        run: ./gradlew build -x test

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            build/libs/
            build/reports/

  security-scan:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"
