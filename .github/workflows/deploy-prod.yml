name: Build and Deploy to EC2 (PROD - Blue/Green)

on:
  push:
    branches: [main]

env:
  IMAGE_NAME: juuuunny/backend

jobs:
  build-and-deploy-prod:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: "${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*','**/gradle-wrapper.properties') }}"
          restore-keys: |
            ${{ runner.os }}-gradle-
            ${{ runner.os }}-

      - name: Grant execute permission for Gradle
        run: chmod +x gradlew

      - name: Build with Gradle (Skip Tests)
        run: ./gradlew clean build -x test

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Decide Tag (prod-blue or prod-green)
        id: get-color
        run: |
          echo "${{ secrets.EC2_PROD_SSH_KEY }}" > ec2key.pem
          chmod 600 ec2key.pem
          COLOR=$(ssh -o StrictHostKeyChecking=no -i ec2key.pem ubuntu@${{ secrets.EC2_PROD_HOST }} 'cat /home/ubuntu/color-config/current_color_prod 2>/dev/null || echo blue')
          if [ "$COLOR" = "blue" ]; then
            echo "TAG_NAME=prod-green" >> $GITHUB_ENV
            echo "NEXT_COLOR=green" >> $GITHUB_OUTPUT
          else
            echo "TAG_NAME=prod-blue" >> $GITHUB_ENV
            echo "NEXT_COLOR=blue" >> $GITHUB_OUTPUT
          fi
          rm -f ec2key.pem

      - name: Build & Push (:prod-blue or :prod-green)
        run: |
          docker build --pull -t $IMAGE_NAME:${TAG_NAME} -f Dockerfile .
          docker push $IMAGE_NAME:${TAG_NAME}

      - name: Deploy to EC2 (PROD switch)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_PROD_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PROD_SSH_KEY }}
          timeout: 10m
          script: |
            set -euo pipefail

            echo "=== PROD Blue/Green 배포 시작 ==="
            echo "배포할 색상: ${{ steps.get-color.outputs.NEXT_COLOR }}"

            # prod 작업 디렉터리 보장 (없으면 기존 ~/dataracy의 origin으로 클론)
            if [ ! -d ~/dataracy-prod/.git ]; then
              if [ -d ~/dataracy/.git ]; then
                echo "기존 dataracy 디렉터리에서 클론..."
                REMOTE=$(git -C ~/dataracy remote get-url origin)
                git clone "$REMOTE" ~/dataracy-prod
              else
                echo "ERROR: ~/dataracy 디렉터리가 없습니다. 수동으로 클론해주세요."
                exit 1
              fi
            fi

            # 최신 코드로 업데이트
            cd ~/dataracy-prod
            git fetch origin main
            git reset --hard origin/main

            # 배포 스크립트 실행 권한 확인
            chmod +x deployment/prod/script/deploy-prod.sh
            chmod +x deployment/prod/blue-green/switch-prod.sh

            # 배포 실행
            echo "배포 스크립트 실행 중..."
            ./deployment/prod/script/deploy-prod.sh

            echo "=== PROD 배포 완료 ==="
